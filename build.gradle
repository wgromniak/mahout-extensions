import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

apply plugin: 'java'
apply plugin: 'findbugs'

// This plugin is used to build a jar with all the dependencies. It exposes shadowJar task.
apply plugin: 'com.github.johnrengelman.shadow'

buildscript {
    repositories { jcenter() }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.1.1'
    }
}

repositories {
    mavenCentral()
    jcenter()
}

configurations {
    compile.exclude module: 'hadoop-core' // substituted by hadoop-common & mapreduce
}

dependencies {
    compile 'com.google.guava:guava:18.0'
    compile 'org.apache.mahout:mahout-core:0.9'
    compile 'org.apache.mahout:mahout-integration:0.9'
    compile 'org.apache.hadoop:hadoop-common:2.6.0'
    compile 'org.apache.hadoop:hadoop-mapreduce-client-core:2.6.0'
    compile 'org.apache.spark:spark-core_2.10:1.0.0'
    compile 'com.codahale.metrics:metrics-core:3.0.2'

    compile files('libs/rseslib-3.0.4.jar')

    testCompile 'org.testng:testng:6.8.8'
    testCompile 'org.mockito:mockito-all:1.9.5'
    testCompile 'org.assertj:assertj-core:1.7.0'
    testCompile 'com.googlecode.catch-exception:catch-exception:1.2.0'
    testCompile 'org.apache.mrunit:mrunit:1.1.0:hadoop2'
    testCompile 'org.apache.hadoop:hadoop-hdfs:2.6.0'
    testCompile 'org.apache.hadoop:hadoop-hdfs:2.6.0:tests'
    testCompile 'org.apache.hadoop:hadoop-minicluster:2.6.0'
}

task jar4Spark(type: ShadowJar) {

    group = "shadow"
    classifier = 'spark'
    from(project.convention.getPlugin(JavaPluginConvention).sourceSets.main.output)
    configurations = [project.configurations.runtime]
    exclude('META-INF/INDEX.LIST', 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA')

    manifest.attributes 'Main-Class': 'org.mimuw.mahoutattrsel.spark.AttrSelDriver'

    dependencies {
        include(dependency('com.google.guava:guava:18.0'))
        include(dependency('org.apache.mahout:mahout-core:0.9'))
        include(dependency('org.apache.mahout:mahout-math:0.9'))
        include(dependency('org.apache.mahout:mahout-integration:0.9'))
        include(dependency('org.apache.solr:solr-commons-csv:3.5.0'))
        include(dependency('com.codahale.metrics:metrics-core:3.0.2'))
    }
}

task jar4MapRed(type: ShadowJar) {

    group = "shadow"
    classifier = 'mapred'
    from(project.convention.getPlugin(JavaPluginConvention).sourceSets.main.output)
    configurations = [project.configurations.runtime]
    exclude('META-INF/INDEX.LIST', 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA')

    manifest.attributes 'Main-Class': 'org.mimuw.mahoutattrsel.mapred.AttrSelDriver'

    dependencies {
        include(dependency('com.google.guava:guava:18.0'))
        include(dependency('org.apache.mahout:mahout-core:0.9'))
        include(dependency('org.apache.mahout:mahout-math:0.9'))
        include(dependency('org.apache.mahout:mahout-integration:0.9'))
        include(dependency('org.apache.solr:solr-commons-csv:3.5.0'))
        include(dependency('org.apache.mahout.commons:commons-cli:2.0-mahout'))
        include(dependency('com.codahale.metrics:metrics-core:3.0.2'))
    }
}

test {
    useTestNG()

    testLogging.showStandardStreams = true
}

findbugsMain {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

findbugsTest {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}